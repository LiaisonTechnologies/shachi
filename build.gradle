apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-library-distribution'

ext.libraryName = "liaison-hbase-${version}"
// ext.verGuava = '18.0'
ext.verGuava = '15.0'
ext.verMockito = '1.10.19'
ext.verPhoenixCommons = '0.0.1-SNAPSHOT'
ext.verPool = '2.3'
ext.verQuasar  = '0.6.2'
ext.verTestNG  = '6.8.21'

configurations {
    provided
    provided.extendsFrom(compile)
    all {
        resolutionStrategy {
            force "com.google.guava:guava:${verGuava}"
            forcedModules = ["com.google.guava:guava:${verGuava}"]
        }
    }
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

allprojects {
    repositories {
        // mavenLocal()
        mavenCentral()
        // Liaison Private Maven artifact repo (Nexus)
        maven { url releasesArtifactRepoURL }
        maven { url snapshotsArtifactRepoURL }
        maven { url thirdpartyArtifactRepoURL }
    }
}

apply from: file('gradle/convention.gradle')
apply from: file('gradle/check.gradle')
apply from: file('gradle/license.gradle')
apply from: file('gradle/maven.gradle')

group = 'com.liaison'
version = '0.0.1-SNAPSHOT'

ext.classifier = ':jdk8'

if (project.hasProperty('env') && project.getProperty('env') == 'mapr') {
    repositories {
        mavenCentral()
        maven {
            url "http://repository.mapr.com/maven/"
        }
    }
    ext.verHBase = '0.98.9-mapr-1503-m7-4.1.0'
    ext.verHadoop = '2.5.1-mapr-1503'
    ext.verZookeeper = '3.4.5-mapr-1406'
} else {
    // ext.verHBase = '0.98.13-hadoop2'
    ext.verHBase = '1.1.1'
    ext.verHadoop = '2.7.1'
    ext.verZookeeper = '3.4.5'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

dependencies {
    compile "com.liaison.phoenix:phoenix-commons:${verPhoenixCommons}"
    compile "com.google.guava:guava:${verGuava}"
    compile "co.paralleluniverse:quasar-core:${verQuasar}${classifier}"
    provided "org.apache.hbase:hbase-client:${verHBase}"
    provided "org.apache.hbase:hbase-common:${verHBase}"
    compile "org.apache.commons:commons-pool2:${verPool}"
    compile "org.testng:testng:${verTestNG}"
    testCompile "org.mockito:mockito-all:${verMockito}"
    testCompile group:'org.apache.hadoop', name:'hadoop-common', version:"${verHadoop}", classifier: 'tests'
    testCompile group:'org.apache.hbase', name:'hbase-server', version:"${verHBase}"
    testCompile group:'org.apache.hbase', name:'hbase-server', version:"${verHBase}", classifier: 'tests'
    testCompile group:'org.apache.hbase', name:'hbase-hadoop-compat', version:"${verHBase}"
    testCompile group:'org.apache.hbase', name:'hbase-hadoop-compat', version:"${verHBase}", classifier: 'tests'
    testCompile group:'org.apache.hbase', name:'hbase-hadoop2-compat', version:"${verHBase}"
    testCompile group:'org.apache.hbase', name:'hbase-hadoop2-compat', version:"${verHBase}", classifier: 'tests'
    testCompile group:'org.apache.hadoop', name:'hadoop-hdfs', version:"${verHadoop}"
    testCompile group:'org.apache.hadoop', name:'hadoop-hdfs', version:"${verHadoop}", classifier: 'tests'
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from {
        configurations.compile.collect {
            logger.info "Including compile dependency in fat JAR: ${it}"
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

task copyToLib( type: Copy ) {
    into "$buildDir/libs/lib"
    from configurations.runtime
}

test {
    useTestNG()
    systemProperty "java.net.preferIPv4Stack", "true"
    printf "!!!!!!!!!! !!!!!!!!!! CLASSPATH: ${classpath.getFiles()}"
    printf "!!!!!!!!!! !!!!!!!!!! SYSTEM PROPERTIES: ${System.getProperties()}"
}

distributions {
    main {
        baseName = "${libraryName}"
    }
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

if (project.hasProperty('mainClass')) {
    task execute(type: JavaExec) {
        main = mainClass
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }
}

eclipse.classpath.plusConfigurations += configurations.provided
plugins.withType(IdeaPlugin) {
    idea {
        module {
            scopes.PROVIDED.plus += [configurations.provided]
        }
    }
}
