buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

plugins {
    id 'org.unbroken-dome.test-sets' version '1.2.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-library-distribution'

ext.libraryName = "liaison-hbase-${version}"
ext.verGuava = '18.0'
ext.verGuavaTEST = '15.0'
ext.verMockito = '1.10.19'
ext.verPhoenixCommons = '0.0.1-SNAPSHOT'
ext.verPool = '2.3'
ext.verQuasar  = '0.6.2'
ext.verTestNG  = '6.8.21'

testSets {
    testUnit { dirName = 'test/unit' }
    testIntegration { dirName = 'test/integration' }
}

configurations {
    provided
    provided {
        extendsFrom(compile)
    }
    testIntConf = provided.copyRecursive()
    testIntConf {
        //extendsFrom(provided)
        resolutionStrategy {
            force "com.google.guava:guava:${verGuavaTEST}"
            forcedModules = ["com.google.guava:guava:${verGuavaTEST}"]
        }
    }
}

sourceSets {
    logger.info "@@@ configurations.provided (type): " + configurations.provided.getClass()
    logger.info "@@@ configurations.testIntConf (type): " + configurations.testIntConf.getClass()
    logger.info "@@@ configurations.testIntConf DEPENDENCIES ~start~"
    logger.info "@@@ configurations.testIntConf.getDependencies(): ${configurations.testIntConf.getDependencies()}"
    logger.info "@@@ configurations.testIntConf.getAllDependencies(): ${configurations.testIntConf.getAllDependencies()}"
    logger.info "@@@ configurations.testIntConf.getArtifacts(): ${configurations.testIntConf.getArtifacts()}"
    logger.info "@@@ configurations.testIntConf.getAllArtifacts(): ${configurations.testIntConf.getAllArtifacts()}"
    configurations.testIntConf.getDependencies().iterator().each {
        logger.info "@@@ configurations.testIntConf (dependency): ${it}"
    }
    configurations.testIntConf.getAllDependencies().iterator().each {
        logger.info "@@@ configurations.testIntConf (allDependency): ${it}"
    }
    configurations.testIntConf.getArtifacts().iterator().each {
        logger.info "@@@ configurations.testIntConf (artifact): ${it}"
    }
    configurations.testIntConf.getAllArtifacts().iterator().each {
        logger.info "@@@ configurations.testIntConf (allArtifact): ${it}"
    }
    logger.info "@@@ configurations.testIntConf DEPENDENCIES ~complete~"
    logger.info "@@@ main.compileClasspath (type): " + main.compileClasspath.getClass()
    logger.info "@@@ testUnit.compileClasspath (type): " + testUnit.compileClasspath.getClass()
    logger.info "@@@ testUnit.runtimeClasspath (type): " + testUnit.runtimeClasspath.getClass()
    logger.info "@@@ testIntegration.compileClasspath (type): " + testIntegration.compileClasspath.getClass()
    logger.info "@@@ testIntegration.runtimeClasspath (type): " + testIntegration.runtimeClasspath.getClass()
    main.compileClasspath += configurations.provided
    testUnit.compileClasspath += configurations.provided
    testUnit.runtimeClasspath += configurations.provided
    /*
    testIntegration.compileClasspath.resolutionStrategy {
        force "com.google.guava:guava:${verGuavaTEST}"
        forcedModules = ["com.google.guava:guava:${verGuavaTEST}"]
    }
    testIntegration.runtimeClasspath.resolutionStrategy {
        force "com.google.guava:guava:${verGuavaTEST}"
        forcedModules = ["com.google.guava:guava:${verGuavaTEST}"]
    }
    */
    logger.info "@@@1 testIntegration.compileClasspath (type): " + testIntegration.compileClasspath.getClass()
    logger.info "@@@1 testIntegration.runtimeClasspath (type): " + testIntegration.runtimeClasspath.getClass()
    testIntegration.runtimeClasspath.iterator().each {
        logger.info "@@@1 testIntegration.runtimeClasspath (content): ${it}"
    }
    testIntegration.compileClasspath += configurations.testIntConf
    testIntegration.runtimeClasspath = configurations.testIntConf

    logger.info "@@@2 main.compileClasspath (type): " + main.compileClasspath.getClass()
    logger.info "@@@2 testUnit.compileClasspath (type): " + testUnit.compileClasspath.getClass()
    logger.info "@@@2 testUnit.runtimeClasspath (type): " + testUnit.runtimeClasspath.getClass()
    logger.info "@@@2 testIntegration.compileClasspath (type): " + testIntegration.compileClasspath.getClass()
    logger.info "@@@2 testIntegration.runtimeClasspath (type): " + testIntegration.runtimeClasspath.getClass()
}

allprojects {
    repositories {
        // mavenLocal()
        mavenCentral()
        // Liaison Private Maven artifact repo (Nexus)
        maven { url releasesArtifactRepoURL }
        maven { url snapshotsArtifactRepoURL }
        maven { url thirdpartyArtifactRepoURL }
    }
}

apply from: file('gradle/convention.gradle')
apply from: file('gradle/check.gradle')
apply from: file('gradle/license.gradle')
apply from: file('gradle/maven.gradle')

group = 'com.liaison'
version = '0.0.1-SNAPSHOT'

ext.classifier = ':jdk8'

if (project.hasProperty('env') && project.getProperty('env') == 'mapr') {
    repositories {
        mavenCentral()
        maven {
            url "http://repository.mapr.com/maven/"
        }
    }
    ext.verHBase = '0.98.9-mapr-1503-m7-4.1.0'
    ext.verHadoop = '2.5.1-mapr-1503'
    ext.verZookeeper = '3.4.5-mapr-1406'
} else {
    ext.verHBase = '0.98.9-hadoop2'
    ext.verHadoop = '2.5.1'
    //ext.verHBase = '1.1.1'
    //ext.verHadoop = '2.7.1'
    ext.verZookeeper = '3.4.5'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

dependencies {
    compile "com.liaison.phoenix:phoenix-commons:${verPhoenixCommons}"
    compile "co.paralleluniverse:quasar-core:${verQuasar}${classifier}"
    provided "org.apache.hbase:hbase-client:${verHBase}"
    provided "org.apache.hbase:hbase-common:${verHBase}"
    compile "org.apache.commons:commons-pool2:${verPool}"
    compile "org.testng:testng:${verTestNG}"
    testCompile "org.mockito:mockito-all:${verMockito}"
    testIntegrationCompile group:'org.apache.hadoop', name:'hadoop-common', version:"${verHadoop}", classifier: 'tests'
    testIntegrationCompile group:'org.apache.hbase', name:'hbase-server', version:"${verHBase}"
    testIntegrationCompile group:'org.apache.hbase', name:'hbase-server', version:"${verHBase}", classifier: 'tests'
    testIntegrationCompile group:'org.apache.hbase', name:'hbase-hadoop-compat', version:"${verHBase}"
    testIntegrationCompile group:'org.apache.hbase', name:'hbase-hadoop-compat', version:"${verHBase}", classifier: 'tests'
    testIntegrationCompile group:'org.apache.hbase', name:'hbase-hadoop2-compat', version:"${verHBase}"
    testIntegrationCompile group:'org.apache.hbase', name:'hbase-hadoop2-compat', version:"${verHBase}", classifier: 'tests'
    testIntegrationCompile group:'org.apache.hadoop', name:'hadoop-hdfs', version:"${verHadoop}"
    testIntegrationCompile group:'org.apache.hadoop', name:'hadoop-hdfs', version:"${verHadoop}", classifier: 'tests'
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from {
        configurations.compile.collect {
            logger.info "Including compile dependency in fat JAR: ${it}"
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

task copyToLib( type: Copy ) {
    into "$buildDir/libs/lib"
    from configurations.runtime
}

testUnit {
    useTestNG()
    logger.info "@@@ Classpath (UNIT testing): ${classpath.getFiles().collect({it.toString()}).inject('\n') {acc, next -> acc + next + '\n'}}"
    logger.info "@@@ SystemProps (UNIT testing): ${System.getProperties().collect({it.toString()}).inject('\n') {acc, next -> acc + next + '\n'}}"
}

testIntegration {
    useTestNG()
    systemProperty "java.net.preferIPv4Stack", "true"
    logger.info "@@@ Classpath (INTEGRATION testing): ${classpath.getFiles().collect({it.toString()}).inject('\n') {acc, next -> acc + next + '\n'}}"
    logger.info "@@@ SysProps (INTEGRATION testing): ${System.getProperties().collect({it.toString()}).inject('\n') {acc, next -> acc + next + '\n'}}"
}

distributions {
    main {
        baseName = "${libraryName}"
    }
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

if (project.hasProperty('mainClass')) {
    task execute(type: JavaExec) {
        main = mainClass
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }
}

eclipse.classpath.plusConfigurations += configurations.provided
plugins.withType(IdeaPlugin) {
    idea {
        module {
            scopes.PROVIDED.plus += [configurations.provided]
        }
    }
}
