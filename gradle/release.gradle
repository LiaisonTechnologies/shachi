apply plugin: 'release'

[ uploadIvyLocal: 'uploadLocal', uploadArtifactory: 'artifactoryPublish', buildWithArtifactory: 'build' ].each { key, value ->
    // Call out to compile against internal repository
    task "${key}"(type: GradleBuild) {
        startParameter = project.gradle.startParameter.newInstance()
        doFirst {
            startParameter.projectProperties = [status: project.status, preferredStatus: project.status]
        }
        startParameter.addInitScript( file('gradle/netflix-oss.gradle') )
        startParameter.getExcludedTaskNames().add('check')
        tasks = [ 'build', value ]
    }
}

/*
 * Copyright Â© 2016 Liaison Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

// Marker task for following code to key in on
task releaseCandidate(dependsOn: release)
task forceCandidate {
    onlyIf { gradle.taskGraph.hasTask(releaseCandidate) }
    doFirst { project.status = 'candidate' }
}
task forceRelease {
    onlyIf { !gradle.taskGraph.hasTask(releaseCandidate) }
    doFirst { project.status = 'release' }
}
release.dependsOn([forceCandidate, forceRelease])

task releaseSnapshot(dependsOn: [uploadArtifactory, uploadMavenCentral])

// Ensure our versions look like the project status before publishing
task verifyStatus << {
    def hasSnapshot = version.contains('-SNAPSHOT')
    if (project.status == 'snapshot' && !hasSnapshot) {
        throw new GradleException("Version (${version}) needs -SNAPSHOT if publishing snapshot")
    }
}
uploadArtifactory.dependsOn(verifyStatus)
uploadMavenCentral.dependsOn(verifyStatus)

// Ensure upload happens before taggging, hence upload failures will leave repo in a revertable state
preTagCommit.dependsOn([uploadArtifactory, uploadMavenCentral])


gradle.taskGraph.whenReady { taskGraph ->
    def hasRelease = taskGraph.hasTask('commitNewVersion')
    def indexOf = { return taskGraph.allTasks.indexOf(it) }

    if (hasRelease) {
        assert indexOf(build) < indexOf(unSnapshotVersion), 'build target has to be after unSnapshotVersion'
        assert indexOf(uploadMavenCentral) < indexOf(preTagCommit), 'preTagCommit has to be after uploadMavenCentral'
        assert indexOf(uploadArtifactory) < indexOf(preTagCommit), 'preTagCommit has to be after uploadArtifactory'
    }
}

// Prevent plugin from asking for a version number interactively
ext.'gradle.release.useAutomaticVersion' = "true"

release {
    git.requireBranch = null
}
